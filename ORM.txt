هنقسمهم لأقسام (CRUD):

🟩 Create (إضافة بيانات)

🟦 Read (قراءة البيانات)

🟨 Update (تعديل البيانات)

🟥 Delete (حذف البيانات)

⚙️ دوال إضافية متقدمة

🟩 قسم الإضافة (CREATE)
🧩 الدالة	🧠 الشرح	💻 المثال العملي
create()	تنشئ صف جديد في قاعدة البيانات مباشرة	                                User.objects.create(name="Ali", age=25)
save()	تحفظ كائن جديد أو تحدث كائن موجود	                                        u = User(name="Omar", age=22); u.save()
bulk_create()	تضيف مجموعة كائنات دفعة واحدة (أسرع)	                            User.objects.bulk_create([User(name='A'), User(name='B')])
get_or_create()	يبحث عن كائن، وإن لم يجده ينشئه	                                     User.objects.get_or_create(name='Hamada', defaults={'age':30})
update_or_create()	يبحث عن كائن ويحدثه أو ينشئه إن لم يوجد	                        User.objects.update_or_create(name='Ali', defaults={'age':35})

__________________________________________________________________________________________________________________________

🟦 قسم القراءة (READ)
🧩 الدالة	🧠 الشرح	💻 المثال العملي
all()	تجلب كل الصفوف في الجدول	                                                    User.objects.all()
get()	تجلب صف واحد يطابق الشرط (يعطي خطأ لو أكثر من واحد أو لا يوجد)	               User.objects.get(id=1)
filter()	تجلب الصفوف التي تحقق شرطًا معينًا	                                          User.objects.filter(age__gt=20)
exclude()	تجلب كل الصفوف عدا التي تحقق شرطًا	                                         User.objects.exclude(name='Ali')
order_by()	ترتيب النتائج حسب حقل معين	                                                 User.objects.order_by('name') أو ('-age')
reverse()	عكس ترتيب النتائج	                                                          User.objects.all().order_by('age').reverse()
first()	أول عنصر في النتائج	                                                              User.objects.first()
last()	آخر عنصر في النتائج	                                                              User.objects.last()
count()	عدد النتائج	                                                                       User.objects.count()
exists()	تتحقق إن كانت النتائج تحتوي على بيانات	                                     User.objects.filter(age=30).exists()
values()	ترجع البيانات كـ dictionaries بدل كائنات	                                  User.objects.values('name', 'age')
values_list()	ترجع List بسيطة من القيم	                                               User.objects.values_list('name', flat=True)
distinct()	إزالة القيم المكررة	                                                           User.objects.values('age').distinct()
only()	تحميل حقول معينة فقط (لتحسين الأداء)	                                           User.objects.only('name')
defer()	تجاهل تحميل حقل معين	                                                           User.objects.defer('email')
in_bulk()	تجلب عدة صفوف باستخدام IDs مرة واحدة	                                      User.objects.in_bulk([1, 2, 3])

__________________________________________________________________________________________________________________________


🟨 قسم التعديل (UPDATE)
🧩 الدالة	🧠 الشرح	💻 المثال العملي
update()	تحديث مجموعة صفوف دفعة واحدة	                            User.objects.all().update(age=0)
save()	تحديث كائن واحد بعد تعديله	                                     u = User.objects.get(id=1); u.age=40; u.save()
update_or_create()	يعدل أو ينشئ صف جديد حسب الحاجة	                    User.objects.update_or_create(name='Ali', defaults={'age':28})

__________________________________________________________________________________________________________________________


🟥 قسم الحذف (DELETE)
🧩 الدالة	🧠 الشرح	💻 المثال العملي
delete()	حذف صف أو أكثر من قاعدة البيانات	                        User.objects.filter(age__lt=10).delete()
clear()	حذف العلاقات (في العلاقات ManyToMany)	                           user.groups.clear()

__________________________________________________________________________________________________________________________


⚙️ قسم العمليات الشرطية (Lookups)

🧠 تُستخدم مع filter() أو exclude() لتصفية البيانات حسب شروط متقدمة.

🔎 الصيغة	🧠 المعنى	💻 المثال
field__exact	يساوي تمامًا	                                              User.objects.filter(name__exact='Ali')
field__iexact	يساوي بدون حساسية حروف	                                    User.objects.filter(name__iexact='ali')
field__contains	يحتوي على النص	                                            User.objects.filter(name__contains='am')
field__icontains	يحتوي بدون حساسية حروف	                               User.objects.filter(name__icontains='am')
field__startswith	يبدأ بـ	                                                 User.objects.filter(name__startswith='A')
field__endswith	ينتهي بـ	                                                User.objects.filter(name__endswith='d')
field__gt	أكبر من	                                                        User.objects.filter(age__gt=30)
field__gte	أكبر أو يساوي	                                               User.objects.filter(age__gte=30)
field__lt	أصغر من	                                                       User.objects.filter(age__lt=30)
field__lte	أصغر أو يساوي	                                              User.objects.filter(age__lte=30)
field__in	ضمن قائمة قيم	                                              User.objects.filter(id__in=[1, 2, 3])
field__range	ضمن نطاق معين	                                          User.objects.filter(age__range=(20, 30))
field__isnull	يساوي NULL أو لا	                                       User.objects.filter(email__isnull=True)
field__regex	يطابق تعبيرًا منتظمًا (Regex)	                           User.objects.filter(name__regex=r'^A')
field__icontains	بحث جزئي بدون حساسية حروف	                         User.objects.filter(name__icontains='ali')

__________________________________________________________________________________________________________________________


🧩 قسم خاص: التعامل مع العلاقات (Relationships)
🧩 العملية	🧠 الشرح	💻 المثال
select_related()	لتحسين الأداء في العلاقات OneToOne و        ForeignKey	User.objects.select_related('profile')
prefetch_related()	لتحسين الأداء في                            ManyToMany	User.objects.prefetch_related('groups')
related_name	اسم عكسي للوصول من العلاقة العكسية	          user.posts.all() لو Post عندها ForeignKey لـ User
add()	إضافة علاقة جديدة	                                   user.groups.add(group1)
remove()	إزالة علاقة	                                        user.groups.remove(group1)
clear()	إزالة كل العلاقات	                                    user.groups.clear()


__________________________________________________________________________________________________________________________



🧮 قسم العمليات الرياضية والتجميعية (Aggregation)
🧩 العملية	🧠 الشرح	💻 المثال
aggregate()	دالة تجميعية (مجموع، متوسط، إلخ)	      User.objects.aggregate(Avg('age'))
annotate()	تضيف قيم محسوبة إلى النتائج	               User.objects.annotate(name_length=Length('name'))
Sum()  المجموع	                                        User.objects.aggregate(Sum('age'))
Avg()  المتوسط	                                        User.objects.aggregate(Avg('age'))
Max()  أكبر قيمة	                                    User.objects.aggregate(Max('age'))
Min()  أصغر قيمة	                                    User.objects.aggregate(Min('age'))
Count()	عدد الصفوف	                                    User.objects.aggregate(Count('id'))

__________________________________________________________________________________________________________________________


💡 ملخص سريع جدًا
نوع العملية	أهم الدوال
إنشاء	create, save, get_or_create
قراءة	all, filter, get, exclude, values, count
تعديل	update, update_or_create
حذف	delete
تحسين الأداء	select_related, prefetch_related
شروط متقدمة	__gt, __lt, __icontains, __in, __range
إحصائيات	aggregate, annotate, Sum, Avg, Count